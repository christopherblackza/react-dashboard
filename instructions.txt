Project Instructions: React + NestJS Admin Dashboard (SaaS)
Overview

Build a full-stack, production-ready Admin Dashboard for our internal SaaS tool.
The system will allow users to:

Manage clients

View reports and analytics

Send notifications

Handle subscriptions and payments via Stripe

This will be a React SPA (CSR) for the frontend and a NestJS REST API for the backend.
The app must include authentication, role-based access, realtime updates, and billing integration.

üèóÔ∏è Core Stack

Frontend:

React (Vite or CRA)

TypeScript

Tailwind CSS + shadcn/ui

React Hook Form + Zod (validation)

Axios (API communication)

Recharts (data visualization)

Zustand or Redux Toolkit (state management)

Backend:

NestJS (REST + WebSockets)

TypeORM or Prisma with PostgreSQL

JWT Auth + Role-based Guard Middleware

WebSockets via Socket.io (realtime)

Stripe API (Checkout, Billing, Webhooks)

Resend or SendGrid (email notifications)

Hosting:

Frontend ‚Üí Vercel or Netlify

Backend ‚Üí Render, Railway, or AWS

PostgreSQL ‚Üí Supabase or Neon.tech

üîê Authentication & Roles

Auth via NestJS (JWT + Refresh Tokens)

Email/password and magic-link support (optional via Resend)

Roles: admin, manager, analyst, viewer

Role-based guards in NestJS

Secure cookies for JWT refresh

Password hashing with bcrypt

üìä Features
1. Dashboard & Reports

Overview metrics: Total Clients, MRR, Active Subs, Churn, ARPU

Charts (Recharts): MRR over time, clients by plan

Date range filters + CSV export

Realtime metric updates (WebSockets)

2. Client Management

CRUD for clients: name, email, owner, tags, plan, MRR

Notes and activity timeline per client

Realtime updates on client list via WebSockets

Filtering and search

3. Notifications

In-app notification center (bell icon)

Email alerts for key events (new client, failed payment, etc.)

Mark notifications as read

4. Billing (Stripe)

Stripe Checkout & Customer Portal

Subscription tiers (monthly, annual, trial)

Webhook handling:

checkout.session.completed

invoice.payment_failed

Show live subscription status

Automatic trial expiry handling

5. Admin Panel

Manage users, roles, and permissions

Audit logs (events table)

System-level analytics dashboard

üóÑÔ∏è Database Schema (PostgreSQL)
Table	Description
organizations	id, name, created_at
users	id, org_id, email, password_hash, full_name, role, created_at
clients	id, org_id, name, email, owner_id, status, plan, mrr, tags, created_at
client_notes	id, client_id, author_id, body, created_at
events	id, org_id, type, entity, entity_id, payload, created_at
subscriptions	id, org_id, stripe_customer_id, stripe_sub_id, status, plan, period_end
notifications	id, org_id, user_id, type, title, body, read_at

Multi-tenant security: Each query must enforce org_id isolation in all endpoints.

‚ö° Realtime

WebSockets via Socket.io

Broadcast events for:

Client created/updated

Report export complete

New notifications

Presence tracking (optional)

üßæ API Endpoints (NestJS)
Endpoint	Method	Description
/api/auth/login	POST	Authenticate user
/api/auth/register	POST	Register new user
/api/clients	GET/POST/PATCH/DELETE	CRUD for clients
/api/notifications	GET/POST	Manage in-app notifications
/api/reports/export	POST	Trigger report export job
/api/stripe/webhook	POST	Handle Stripe events
/api/users/invite	POST	Admin invites new user
/api/admin/users	GET/POST	Manage user roles

All routes use:

JWT auth guard

Role guard (admin/manager/etc.)

Exception filters for clean error responses

üñ•Ô∏è Frontend Routes (React CSR)
Route	Description
/login	Authentication page
/	Dashboard overview
/clients	Client list & CRUD
/clients/:id	Client detail + notes
/reports	Analytics & exports
/notifications	Notification center
/admin/users	User management
/billing	Stripe portal & subscription info
üß∞ Dev & Tooling

Type Safety: TypeScript + Zod

Linting & Formatting: ESLint + Prettier

Testing: Jest (unit) + Playwright (E2E)

Seed Script: Create demo org, users, and clients

CI/CD: GitHub Actions or Render CI

üß© Environment Variables
DATABASE_URL=
JWT_SECRET=
REFRESH_TOKEN_SECRET=
STRIPE_SECRET_KEY=
STRIPE_WEBHOOK_SECRET=
STRIPE_PUBLISHABLE_KEY=
RESEND_API_KEY=
SOCKET_IO_SERVER_URL=
FRONTEND_URL=

‚úÖ Deliverables

Complete codebase: React (frontend) + NestJS (backend)

PostgreSQL schema + migration scripts

Role-based auth guards and JWT logic

Stripe billing flow end-to-end

Deployed demo (Vercel/Netlify + Render/Railway)

README with setup and .env configuration

Example test suite and Postman collection

Optional Loom walkthrough of key features

üß± Milestones

Database + Auth setup (NestJS, Postgres)

Client CRUD + Realtime updates

Reports & analytics module

Stripe integration + webhook handling

Admin panel + notification system

Final testing + deployment

üéØ Definition of Done

Secure JWT auth + role-based routes

Stripe subscription sync fully functional

Dashboard live with realtime data

Admin panel fully managing users and roles

Reports filterable and exportable

Clean, responsive UI

CI/CD + README complete